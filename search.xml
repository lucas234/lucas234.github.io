<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Selenium Grid 使用]]></title>
    <url>%2Fselenium-grid.html</url>
    <content type="text"><![CDATA[什么是Selenium GridSelenium Grid是Selenium套件的一部分，它专门用于并行运行多个测试用例在不同的浏览器、操作系统和机器上。Selenium Grid有两个版本——老版本Grid 1和新版本Grid 2。我们只对新版本做介绍，因为Selenium团队已经逐渐遗弃老版本了。Selenium Grid 主要使用 master-slaves (or hub-nodes) 理念 –一个 master/hub 和多个 基于master/hub注册的子节点 slaves/nodes。当我们在master上基于不同的浏览器/系统运行测试用例时，master将会分发给适当的node运行。 什么时候用Selenium Grid 同时在不同的浏览器、操作系统和机器上运行测试。最大程度用于兼容性测试 减少运行时间 怎样启动Selenium Grid？启动Selenium Grid的三种方式，一种直接用命令行，另一种用JSON配置文件，最后一种docker启动。 1. 命令行启动s将会使用2台机器，一台运行hub另一台运行node，为了方便描述，将运行hub的机器命名为“Machine H”（IP：192.168.1.100），运行node的机器命名为“Machine N”（IP：192.168.1.101） Step 1 配置Java环境 已安装需要运行的浏览器 下载浏览器driver，放到和selenium server相同的路径下（查看） ，否则在启动node时要加参数，不然启动不了浏览器（java -Dwebdriver.chrome.driver=&quot;C:\your path\chromedriver.exe&quot; -jar selenium-server-standalone-3.141.59.jar -role node -hub http://192.168.1.100:5566/grid/register/，可切换浏览器） driver link comments Firefox 下载 安装的浏览器要和下载的driver版本一致 Chrome 下载 安装的浏览器要和下载的driver版本一致 IE 下载 安装的浏览器要和下载的driver版本一致 Edge 下载 安装的浏览器要和下载的driver版本一致 下载selenium server，将selenium-server-standalone-X.XX.jar分别放在“Machine H”和“Machine N”上（自定义路径） Step 2 在机器“Machine H”上打开命令行，到selenium server所在的路径，运行：java -jar selenium-server-standalone-3.141.59.jar -role hub -port 5566，成功启动你会看到： 或者直接在机器“Machine H”上的浏览器（“Machine N”则需要将IP修改为“Machine H”的）打开：http://localhost:5566/grid/console ，将会看到： 在机器“Machine N”上打开命令行，到selenium server所在的路径，运行：java -jar selenium-server-standalone-3.141.59.jar -role node -hub http://192.168.1.100:5566/grid/register/ -port 5577，成功启动你会看到：刷新：http://localhost:5566/grid/console ，将会看到： Step 3运行测试脚本，将会看到在机器“Machine N”上打开了Chrome浏览器，并运行了测试用例： 12345678910from selenium import webdriverds = &#123;'platform': 'ANY', 'browserName': "chrome", 'version': '', 'javascriptEnabled': True &#125;dr = webdriver.Remote('http://192.168.1.101:5577/wd/hub', desired_capabilities=ds)dr.get("https://www.baidu.com")print dr.name 2. Json配置文件启动Step 1 创建hub的Json配置文件（ 查看）代码如下： 123456789101112131415&#123; &quot;port&quot;: 4444, &quot;newSessionWaitTimeout&quot;: -1, &quot;servlets&quot; : [], &quot;withoutServlets&quot;: [], &quot;custom&quot;: &#123;&#125;, &quot;capabilityMatcher&quot;: &quot;org.openqa.grid.internal.utils.DefaultCapabilityMatcher&quot;, &quot;registry&quot;: &quot;org.openqa.grid.internal.DefaultGridRegistry&quot;, &quot;throwOnCapabilityNotPresent&quot;: true, &quot;cleanUpCycle&quot;: 5000, &quot;role&quot;: &quot;hub&quot;, &quot;debug&quot;: false, &quot;browserTimeout&quot;: 0, &quot;timeout&quot;: 1800&#125; 将上述代码保存为`hub_config.json`文件，放在“Machine H”上和selenium server相同的路径下。 创建nodes的 Json配置文件（如果selenium版本是3.0或更高则查看，否则查看）代码如下： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&#123; &quot;capabilities&quot;: [ &#123; &quot;browserName&quot;: &quot;firefox&quot;, &quot;marionette&quot;: true, &quot;maxInstances&quot;: 5, &quot;seleniumProtocol&quot;: &quot;WebDriver&quot; &#125;, &#123; &quot;browserName&quot;: &quot;chrome&quot;, &quot;maxInstances&quot;: 5, &quot;seleniumProtocol&quot;: &quot;WebDriver&quot; &#125;, &#123; &quot;browserName&quot;: &quot;internet explorer&quot;, &quot;platform&quot;: &quot;WINDOWS&quot;, &quot;maxInstances&quot;: 1, &quot;seleniumProtocol&quot;: &quot;WebDriver&quot; &#125;, &#123; &quot;browserName&quot;: &quot;safari&quot;, &quot;technologyPreview&quot;: false, &quot;platform&quot;: &quot;MAC&quot;, &quot;maxInstances&quot;: 1, &quot;seleniumProtocol&quot;: &quot;WebDriver&quot; &#125; ], &quot;proxy&quot;: &quot;org.openqa.grid.selenium.proxy.DefaultRemoteProxy&quot;, &quot;maxSession&quot;: 5, &quot;port&quot;: -1, &quot;register&quot;: true, &quot;registerCycle&quot;: 5000, &quot;hub&quot;: &quot;http://192.168.1.100:4444&quot;, &quot;nodeStatusCheckTimeout&quot;: 5000, &quot;nodePolling&quot;: 5000, &quot;role&quot;: &quot;node&quot;, &quot;unregisterIfStillDownAfter&quot;: 60000, &quot;downPollingLimit&quot;: 2, &quot;debug&quot;: false, &quot;servlets&quot; : [], &quot;withoutServlets&quot;: [], &quot;custom&quot;: &#123;&#125;&#125; 保存为node_config.json文件（注意将hub对应的值改为机器“Machine H”的IP），放在“Machine N”上和selenium server相同的路径下。（当多个node时需将该文件放在多个node机器上或者同一个机器上启动多个node） Step 2hub机器上命令行运行：java -jar selenium-server-standalone-3.141.59.jar -role hub -hubConfig hub_config.json node机器上命令行运行：java -jar selenium-server-standalone-3.141.59.jar -role node -nodeConfig node_config.json 运行之前的验证方法和脚本查看是否正确 （1、2）方式启动的挑战不易启动和维护： 每个node需要下载和配置依赖 java 进程占内存 出现问题时需手动启动 不易维护 扩展性差 3. docker启动docker简介 https://docs.docker.com/docker-hub/ https://yeasy.gitbooks.io/docker_practice/appendix/repo/mysql.html https://docker-curriculum.com/ https://towardsdatascience.com/learn-enough-docker-to-be-useful-1c40ea269fa8 docker启动Selenium Griddocker上已经有selenium官方的Selenium Grid镜像，只有你已经安装了docker，即可使用。 启动hub：docker run -d -p 4444:4444 --name selenium-hub selenium/hub 启动node（Chrome&amp;&amp;Firefox）： docker run -d --link selenium-hub:hub selenium/node-chrome docker run -d --link selenium-hub:hub selenium/node-firefox 运行命令将会下载内置镜像文件（包括java、Chrome、Firefox、selenium-server-standalone-XXX.jar 等运行selenium所需的环境）；此时你可以访问：http://localhost:4444/grid/console如果需要多个Chrome node则继续运行这个命令：docker run -d --link selenium-hub:hub selenium/node-chrome，刷新则看到多了一个Chrome实例。通过运行命令：docker ps，显示正在运行的容器关闭docker-grid的命令：docker stop $(docker ps -a -q)， docker rm $(docker ps -a -q)docker已经简化了selenium Grid的搭建流程，但是还是有很多的手动工作。需要一个一个的启动/关闭hub/nodes. docker 组件启动Selenium Gridselenium Grid通常需要启动一个hub，多个nodes像Chrome、Firefox等。我们可以把他们定义到一个文件中叫做docker-compose.yml，通过一个命令来整体启动，docker提供了一个这样的工具 –Docker-Compose。安装docker-compose查看，一旦安装成功，则创建一个新的文件夹，创建文件 docker-compose.yml, docker-compose.yml内容: 123456789101112131415161718192021version: &quot;3&quot;services: selenium-hub: image: selenium/hub container_name: selenium-hub ports: - &quot;4444:4444&quot; chrome: image: selenium/node-chrome depends_on: - selenium-hub environment: - HUB_PORT_4444_TCP_ADDR=selenium-hub - HUB_PORT_4444_TCP_PORT=4444 firefox: image: selenium/node-firefox depends_on: - selenium-hub environment: - HUB_PORT_4444_TCP_ADDR=selenium-hub - HUB_PORT_4444_TCP_PORT=4444 docker-compose命令： 运行命令启动（到docker-compose.yml路径下）：docker-compose up -d 查看启动是否成功：docker-compose ps 创建更多实例：docker-compose scale chrome=5 关闭命令：docker-compose down 浏览器打开http://localhost:4444/grid/console将会看到：运行脚本的话直接运行就好（IP：http://localhost:4444/wd/hub） ，和上边两种的方法不太一样；不会有浏览器打开（容器内部运行），但是已经运行成功： 12345678910111213141516171819202122232425262728import unittestfrom selenium import webdriverclass MyTestCase(unittest.TestCase): def setUp(self): ds = &#123;'platform': 'ANY', 'browserName': "chrome", 'version': '', 'javascriptEnabled': True &#125; self.dr = webdriver.Remote('http://localhost:4444/wd/hub', desired_capabilities=ds) def test_something(self): self.dr.get("https://www.baidu.com") self.assertEqual(self.dr.name, "chrome") def test_search_button(self): self.dr.get("https://www.baidu.com") self.assertTrue(self.dr.find_element_by_id("su").is_displayed()) def tearDown(self): self.dr.quit()if __name__ == '__main__': unittest.main() 总结主要对启动Selenium Grid的三种方式做了整理，方便使用者选出最佳的方式。 参考： https://github.com/SeleniumHQ/selenium/wiki/Grid2 https://www.guru99.com/introduction-to-selenium-grid.html http://www.testautomationguru.com/selenium-grid-setup-using-docker/]]></content>
      <tags>
        <tag>selenium</tag>
        <tag>grid</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Appium自动化Windows APP]]></title>
    <url>%2Fappium-windows.html</url>
    <content type="text"><![CDATA[前提条件 Windows 10或者更新版本 需要WinAppDriver 环境搭建 打开Windows PC的开发者模式 下载Windows SDK并默认安装 下载Windows driver并默认安装 运行WinAppDriver.exe（记得要用admin权限运行）， 默认路径 (C:\Program Files (x86)\Windows Application Driver) 可以自定义地址或端口： 123WinAppDriver.exe 4727WinAppDriver.exe 127.0.0.1 4725WinAppDriver.exe 127.0.0.1 4723/wd/hub 如下图： Windows 自动化脚本运行脚本前要打开 WinAppDriver.exe对于Windows App来说，只需要传一个app capabilities 即可。对于UWP的App，app对应的值为Application Id（App ID）。关于如何获取APP ID，可以使用powershell命令get-StartApps来获取，打开powershell终端运行：get-StartApps | select-string &quot;计算器&quot;即可获取值（运行命令之前先打开计算器）。以下是java样例代码： 1234DesiredCapabilities cap = new DesiredCapabilities();cap.setCapability("app", "LexisNexisAPAC.LexisRed_wsek3cqrhvvz2!App");driver = new WindowsDriver(new URL("http://127.0.0.1:4723"), cap);driver.findElementByAccessibilityId("CalculatorResults"); 对于经典的Windows App，app对应的值为可执行的.exe文件路径。以下是java样例代码： 12345678// Launch NotepadDesiredCapabilities cap= new DesiredCapabilities();cap.SetCapability("app", "C:\\Windows\\System32\\notepad.exe");cap.SetCapability("appArguments", "MyTestFile.txt");cap.SetCapability("appWorkingDir", "C:\\MyTestFolder");driver= new WindowsDriver(new URL("http://127.0.0.1:4723"), cap);// Use the session to control the appdriver.FindElementByClassName("Edit").SendKeys("This is some text"); Windows定位元素使用Windows SDK提供的工具inspect.exe（C:\Program Files (x86)\Windows Kits\10\bin\x86或者C:\Program Files (x86)\Windows Kits\10\bin\10.0.18362.0\x64根据系统查看）来定位，详情查看inspect，或者使用AccExplorer32、UISpy定位。支持的定位方式： API 定位方法 对应inspect.exe的属性 例子 FindElementByAccessibilityId accessibility id AutomationId AppNameTitle FindElementByClassName class name ClassName TextBlock FindElementById id RuntimeId (decimal) 42.333896.3.1 FindElementByName name Name Calculator FindElementByTagName tag name LocalizedControlType (upper camel case) Text FindElementByXPath xpath Any //Button[0] 计算器的例子Python（GitHub）： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869import unittestfrom appium import webdriverclass WindowsCalculatorTest(unittest.TestCase): @classmethod def setUpClass(self): # set up appium desired_caps = &#123;&#125; desired_caps["app"] = "Microsoft.WindowsCalculator_8wekyb3d8bbwe!App" self.driver = webdriver.Remote(command_executor='http://127.0.0.1:4723', desired_capabilities=desired_caps) @classmethod def tearDownClass(self): self.driver.quit() def getresults(self): displaytext = self.driver.find_element_by_accessibility_id("CalculatorResults").text displaytext = displaytext.strip("显示为 ") displaytext = displaytext.rstrip(' ') displaytext = displaytext.lstrip(' ') return displaytext def test_addition(self): self.driver.find_element_by_name("一").click() self.driver.find_element_by_name("加").click() self.driver.find_element_by_name("七").click() self.driver.find_element_by_name("等于").click() self.assertEqual(self.getresults(), "8") def test_combination(self): self.driver.find_element_by_name("七").click() self.driver.find_element_by_name("乘以").click() self.driver.find_element_by_name("九").click() self.driver.find_element_by_name("加").click() self.driver.find_element_by_name("一").click() self.driver.find_element_by_name("等于").click() self.driver.find_element_by_name("除以").click() self.driver.find_element_by_name("八").click() self.driver.find_element_by_name("等于").click() self.assertEqual(self.getresults(), "8") def test_division(self): self.driver.find_element_by_name("八").click() self.driver.find_element_by_name("八").click() self.driver.find_element_by_name("除以").click() self.driver.find_element_by_name("一").click() self.driver.find_element_by_name("一").click() self.driver.find_element_by_name("等于").click() self.assertEqual(self.getresults(), "8") def test_multiplication(self): self.driver.find_element_by_name("九").click() self.driver.find_element_by_name("乘以").click() self.driver.find_element_by_name("九").click() self.driver.find_element_by_name("等于").click() self.assertEqual(self.getresults(), "81") def test_subtraction(self): self.driver.find_element_by_name("九").click() self.driver.find_element_by_name("减").click() self.driver.find_element_by_name("一").click() self.driver.find_element_by_name("等于").click() self.assertEqual(self.getresults(), "8")if __name__ == '__main__': unittest.main() java（GitHub）： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import org.openqa.selenium.WebElement;import org.openqa.selenium.remote.DesiredCapabilities;import java.util.concurrent.TimeUnit;import java.net.URL;import io.appium.java_client.windows.WindowsDriver;import org.testng.Assert;import org.testng.annotations.*;public class WindowsCalculatorTest &#123; private static WindowsDriver CalculatorSession = null; private static WebElement CalculatorResult = null; @BeforeClass public static void setup() &#123; try &#123; DesiredCapabilities capabilities = new DesiredCapabilities(); capabilities.setCapability("app", "Microsoft.WindowsCalculator_8wekyb3d8bbwe!App"); CalculatorSession = new WindowsDriver(new URL("http://127.0.0.1:4723"), capabilities); CalculatorSession.manage().timeouts().implicitlyWait(2, TimeUnit.SECONDS); CalculatorResult = CalculatorSession.findElementByAccessibilityId("CalculatorResults"); &#125;catch(Exception e)&#123; e.printStackTrace(); &#125; finally &#123;&#125; &#125; @AfterClass public static void TearDown() &#123; CalculatorResult = null; if (CalculatorSession != null) &#123; CalculatorSession.quit(); &#125; CalculatorSession = null; &#125; @Test public void Addition() &#123; CalculatorSession.findElementByName("七").click(); CalculatorSession.findElementByName("七").click(); CalculatorSession.findElementByName("加").click(); CalculatorSession.findElementByName("八").click(); CalculatorSession.findElementByName("等于").click(); Assert.assertEquals("显示为 85", CalculatorResult.getText()); &#125; @Test public void Combination() &#123; CalculatorSession.findElementByName("七").click(); CalculatorSession.findElementByName("乘以").click(); CalculatorSession.findElementByName("九").click(); CalculatorSession.findElementByName("加").click(); CalculatorSession.findElementByName("一").click(); CalculatorSession.findElementByName("等于").click(); CalculatorSession.findElementByName("除以").click(); CalculatorSession.findElementByName("八").click(); CalculatorSession.findElementByName("等于").click(); Assert.assertEquals("显示为 8", CalculatorResult.getText()); &#125; @Test public void Division() &#123; CalculatorSession.findElementByName("六").click(); CalculatorSession.findElementByName("四").click(); CalculatorSession.findElementByName("除以").click(); CalculatorSession.findElementByName("八").click(); CalculatorSession.findElementByName("等于").click(); Assert.assertEquals("显示为 8", CalculatorResult.getText()); &#125; @Test public void Multiplication() &#123; CalculatorSession.findElementByName("六").click(); CalculatorSession.findElementByName("乘以").click(); CalculatorSession.findElementByName("八").click(); CalculatorSession.findElementByName("等于").click(); Assert.assertEquals("显示为 48", CalculatorResult.getText()); &#125; @Test public void Subtraction() &#123; CalculatorSession.findElementByName("九").click(); CalculatorSession.findElementByName("减").click(); CalculatorSession.findElementByName("一").click(); CalculatorSession.findElementByName("等于").click(); Assert.assertEquals("显示为 8", CalculatorResult.getText()); &#125;&#125; 参考 http://appium.io/docs/en/drivers/windows/ https://github.com/Microsoft/WinAppDriver?WT.mc_id=-blog-scottha 问题总结 org.openqa.selenium.WebDriverException: Failed to locate opened application window with appId 遇到此问题是在启动APP时报的错，成功的启动了APP，但是抛出这个异常，导致后续无法测试，目前找了一个临时解决方案：在new driver时增加try catch机制，即可避免，例如： 123456try &#123; driver = new WindowsDriver(new URL("http://127.0.0.1:4723"), cap);&#125;catch (Exception e)&#123;// e.printStackTrace(); driver = new WindowsDriver(new URL("http://127.0.0.1:4723"), cap);&#125;]]></content>
      <tags>
        <tag>appium</tag>
        <tag>App</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world.html</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
